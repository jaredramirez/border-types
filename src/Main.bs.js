// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Process = require("process");
var Minimist = require("minimist.re/src/Minimist.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Print$BorderTypes = require("./Print.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var partial_arg = /* Some */Block.simpleVariant("Some", [/* :: */Block.simpleVariant("::", [
        "help",
        /* :: */Block.simpleVariant("::", [
            "version",
            /* [] */0
          ])
      ])]);

var partial_arg$1 = /* Some */Block.simpleVariant("Some", [/* :: */Block.simpleVariant("::", [
        /* tuple */[
          "h",
          "help"
        ],
        /* :: */Block.simpleVariant("::", [
            /* tuple */[
              "V",
              "version"
            ],
            /* [] */0
          ])
      ])]);

function parseArgs(param, param$1, param$2, param$3, param$4, param$5) {
  return Minimist.parse(partial_arg$1, partial_arg, param, param$1, param$2, param$3, param$4, param$5);
}

var parsed = parseArgs(/* None */0, /* None */0, /* None */0, /* None */0, /* None */0, $$Array.to_list(Process.argv.slice(2)));

if (parsed.tag) {
  Print$BorderTypes.printMiministError(parsed[0]);
  Pervasives.exit(1);
} else {
  var options = parsed[0];
  if (Curry._2(Minimist.has, "help", options[/* presence */0])) {
    Print$BorderTypes.printHelp(/* () */0);
    Pervasives.exit(0);
  } else if (Curry._2(Minimist.has, "version", options[/* presence */0])) {
    Print$BorderTypes.printVersion(/* () */0);
    Pervasives.exit(0);
  } else {
    var exit = 0;
    var fileName;
    try {
      fileName = List.hd(options[/* rest */6]);
      exit = 1;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        Pervasives.exit(1);
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      console.log(fileName);
      Pervasives.exit(0);
    }
    
  }
}

exports.parseArgs = parseArgs;
exports.parsed = parsed;
/* parsed Not a pure module */
