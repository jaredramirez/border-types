// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Misc$BorderTypes = require("./Misc.bs.js");

function decodeString(param) {
  return Json_decode.map((function (x) {
                return /* Str */Block.variant("Str", 0, [x]);
              }), Json_decode.string, param);
}

function decodeList(param) {
  return Json_decode.map((function (x) {
                return /* List */Block.variant("List", 1, [x]);
              }), (function (param) {
                return Json_decode.list(Misc$BorderTypes.identity, param);
              }), param);
}

function decodeDict(param) {
  return Json_decode.map((function (x) {
                return /* Dict */Block.variant("Dict", 2, [x]);
              }), (function (param) {
                return Json_decode.dict(Misc$BorderTypes.identity, param);
              }), param);
}

function run(json) {
  var decoded = Json_decode.oneOf(/* :: */Block.simpleVariant("::", [
          decodeString,
          /* :: */Block.simpleVariant("::", [
              decodeList,
              /* :: */Block.simpleVariant("::", [
                  decodeDict,
                  /* [] */0
                ])
            ])
        ]), json);
  var exit = 0;
  var val;
  try {
    val = decoded;
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Json.ParseError) {
      return /* Error */Block.variant("Error", 1, [/* ParseError */Block.variant("ParseError", 0, [exn[1]])]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    switch (val.tag | 0) {
      case 0 : 
          var str = val[0];
          switch (str) {
            case "bool" : 
                return /* Ok */Block.variant("Ok", 0, [/* Bool */3]);
            case "float" : 
                return /* Ok */Block.variant("Ok", 0, [/* Float */2]);
            case "int" : 
                return /* Ok */Block.variant("Ok", 0, [/* Int */1]);
            case "string" : 
                return /* Ok */Block.variant("Ok", 0, [/* String */0]);
            case "unit" : 
                return /* Ok */Block.variant("Ok", 0, [/* Unit */4]);
            default:
              return /* Error */Block.variant("Error", 1, [/* UnknownTypeError */Block.variant("UnknownTypeError", 1, [str])]);
          }
      case 1 : 
          var list = val[0];
          if (list) {
            if (list[1]) {
              return Misc$BorderTypes.mapErrorResult((function (x) {
                            return /* ListError */Block.variant("ListError", 2, [x]);
                          }), Misc$BorderTypes.mapResult((function (x) {
                                return /* Tuple */Block.variant("Tuple", 1, [x]);
                              }), Misc$BorderTypes.traverseResults(run, list)));
            } else {
              var listTypeDecoded = run(list[0]);
              return Misc$BorderTypes.mapResult((function (x) {
                            return /* List */Block.variant("List", 0, [x]);
                          }), listTypeDecoded);
            }
          } else {
            return /* Ok */Block.variant("Ok", 0, [/* Unit */4]);
          }
      case 2 : 
          var match = List.split($$Array.to_list(Js_dict.entries(val[0])));
          var keys = match[0];
          var valuesDecoded = Misc$BorderTypes.traverseResults(run, match[1]);
          return Misc$BorderTypes.mapResult((function (actual) {
                        return /* Record */Block.variant("Record", 2, [Misc$BorderTypes.listToStringMap(List.combine(keys, actual))]);
                      }), valuesDecoded);
      
    }
  }
  
}

var Primitive = /* module */Block.localModule([
    "decodeString",
    "decodeList",
    "decodeDict",
    "run"
  ], [
    decodeString,
    decodeList,
    decodeDict,
    run
  ]);

var Custom = /* module */Block.localModule([], []);

var R = 0;

exports.R = R;
exports.Primitive = Primitive;
exports.Custom = Custom;
/* Js_dict Not a pure module */
